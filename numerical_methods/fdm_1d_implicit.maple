fdm_1d_implicit:=proc(alpha, p, q, f, L, N__x, N__t, t__F)

local Delta__x, Delta__t, U, r, j, k, dummy;
local A_prime, c, U_now, U_next;

Delta__x:=L/N__x;
Delta__t:=t__F/N__t;

#------------------------------------------
# Prepare the matrix u
U:=Matrix(N__x+1,N__t+1,0):

#------------------------------------------
# Apply the initial condition U(x,0)=f(x)
for j from 1 to N__x+1 do 
  U[j,1]:=f((j-1)*Delta__x);
end do:

#------------------------------------------
r:=evalf(alpha^2*Delta__t/Delta__x^2):
#r:=1;
#------------------------------------------
# Create matrix A'
A_prime:=Matrix(N__x-1,N__x-1);

for j from 1 to N__x-1 do
  for k from 1 to N__x-1 do
    if type(j+k, odd)= true then
      A_prime[j,k] := -r;
    end if
  end do:
end do:

#------------------------------------------
for k from 1 to N__t do     # time-wise

  # Keep the boundary condition
  U[1,k]:=p((k-1)*Delta__t):
  U[N__x+1,k]:=q((k-1)*Delta__t):
  
  U[1,k+1]:=p((k)*Delta__t):
  U[N__x+1,k+1]:=q((k)*Delta__t):

  # Fill matrix c
  c:=Matrix(N__x-1,1,
       [r*p((k-1)*Delta__t)+r*p(k*Delta__t)+2*(1-r)*U(2,k)+r*U(3,k), 
        seq(r*U(j,k)+2*(1-r)*U(j+1,k)+r*U(j+2,k),j=2..N__x-2),
        r*U(N__x-1,k)+2*(1-r)*U(N__x,k)+r*q(k*Delta__t)+r*q((k-1)*Delta__t)]);

  # Jacobi iteration
  U_now:=Matrix(N__x-1, 1, 1/(2*(1+r))*~c);

  while true do 
    U_next:=evalf(Matrix(N__x-1, 1, 1/(2*(1+r))*~(c-(A_prime.U_now))));

    if (norm(U_next-U_now) < 1e-12) then # check for convergence
      break;  
    end if;

    U_now:=U_next;
  end do:

  U[2..N__x,k+1]:=U_now;

end do: 
#------------------------------------------

#print('c'=c);
#print('r'=r);
#print('A_prime'=A_prime);
#print('U_now'=U_now);
#print('U_next'=U_next);

return U;
end proc:

