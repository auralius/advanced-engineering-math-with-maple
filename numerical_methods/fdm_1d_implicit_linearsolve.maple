# Auralius Manurung, 2021
# Universitas Pertamina
#===============================================================================

fdm_1d_implicit_linearsolve:=proc(alpha, p, q, f, L, N__x, N__t, t__F)

local Delta__x, Delta__t, U, U_now, U_next, r, j, k, c;
local A, b, B;

#-------------------------------------------------------------------------------
Delta__x:=L/N__x;
Delta__t:=t__F/N__t;

#-------------------------------------------------------------------------------
r:=evalf(alpha^2*Delta__t/Delta__x^2):

#-------------------------------------------------------------------------------
# Create matrix A and b
A:=Matrix(N__x-1,N__x-1);
b:=Matrix(N__x-1,N__x-1);

for j from 1 to N__x-1 do
  for k from 1 to N__x-1 do
    if (abs(j-k)=1) then
      A[j,k] := -r;
      b[j,k] := r;
    elif (j=k) then
      A[j,k] := 2*(1+r);      
      b[j,k] := 2*(1-r); 
    end if
  end do:
end do:

#-------------------------------------------------------------------------------
# Prepare the matrix U
U:=Matrix(N__x+1,N__t+1,0):

#-------------------------------------------------------------------------------
# Apply the initial condition U(x,0)=f(x)
for j from 1 to N__x+1 do 
  U[j,1]:=f((j-1)*Delta__x);
end do:

#-------------------------------------------------------------------------------
# Apply the boundary condition, p(t) and q(t)
for k from 1 to N__t do
  U[1,k]:=p((k-1)*Delta__t):
  U[N__x+1,k]:=q((k-1)*Delta__t):
end do:
  
#-------------------------------------------------------------------------------
for k from 1 to N__t do     # time-wise

  # Fill matrix c
  c:=Matrix(N__x-1,1,
       [r*p((k-1)*Delta__t)+r*p(k*Delta__t), 
        seq(0*j,j=2..N__x-2),
        r*q(k*Delta__t)+r*q((k-1)*Delta__t)]);

  # Get current U
  U_now:=Matrix(N__x-1,1,U[2..N__x, k]);

  # Caclate next U
  B:=(b.U_now)+c;
  U_next:=LinearSolve(A,B);

  # Update the corresponding matrix U
  U[2..N__x,k+1]:=U_next;

end do: 
#-------------------------------------------------------------------------------

#print('c'=c);
#print('r'=r);
#print('A'=A);
#print('B'=B);
#print('U_now'=U_now);
#print('U_next'=U_next);

return evalf(U);
end proc:

